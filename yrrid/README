This codebase is implement in C.  It was developed, debugged and tested using C and x86 SIMD instructions and
subsequently cross compiled to WASM using clang-17.  Unfortunately, this code is not as well documented as we'd
like (since we've run low on time).  It might be better to start by looking at the twisted-edwards implementation, 
there are more comments there, and go through this implementation.  If you have any questions about the code,
feel free to write me at nemmart at yrrid.com.

To build and run the development version of MSM use the following commands:
   make x86simd
   ./x86simd 128

The expected result are:
00B0FA52B5F56B22A0A25670305098E1DAA3D2D0FCB611E42C22A62AE21B4C786BA2A2238381B8C898DA58447D221BBD
012422212779C4CD14FA01E27DC97C1C6379607D8BD8C4F935FB533145446F85379ADFDE6E8C0D84418ECD310E3FF608

This is a small size MSM.  For bigger MSMs, you would need to generate point and scalar datasets (points.hex
and scalars.hex).  These files are quite large, so we have only included small samples in the repo.

To build the WASM binary, please ensure clang-17 is installed and run:
  make msm.wasm

The clang-17 compilation appears to be deterministic, and sum msm.wasm returns 25814

We ran into one technical challenge during the development of the WASM version -- for simplicity and 
cleanliness sake, we deciced not to use any pre-built multi-threading libraries, instead we rolled our 
own based on built-in __atomic ops.  WASM C uses two stacks, the WASM stack, and a shadow stack for C 
local variables that resides in WASM memory.  When we started working with multiple threads, we discovered 
that the shadow stacks of the various threads were placed at the same memory locations and clobbered one
another.  We eventually solved this by initializing the stack pointer to different regions of memory 
depending on the thread ID.  See src/submission/worker.js.



